{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Documentation for NOMAD base sections at HZB \u00b6 Introduction \u00b6 This is a NOMAD plugin. For information on how to use plugins, see NOMAD Plugins . About the Plugin \u00b6 The core of this plugin includes deposition techniques used in perovskite solar cells, characterization methods for these solar cells, and electrochemical techniques, such as those involving a potentiostat. The plugin offers a structured approach to managing and analyzing data related to these techniques, facilitating a deeper understanding and innovations in solar cell and electrocatalysis research. Baseclasses Folder \u00b6 The baseclasses folder is the heart of this plugin, containing several NOMAD schemas developed at Helmoltz-Zentrum Berlin (HZB). These schemas are critical for organizing and interpreting experimental data. Application Plugins and Parsers \u00b6 The schemas and techniques provided by this plugin can be used to derive application-specific plugins and parsers. Here are some examples of how our baseclasses have been utilized in different contexts: HZB Solar Cells HZB Electro Catalysis KIT Solar Cells","title":"Home"},{"location":"index.html#welcome-to-the-documentation-for-nomad-base-sections-at-hzb","text":"","title":"Welcome to the Documentation for NOMAD base sections at HZB"},{"location":"index.html#introduction","text":"This is a NOMAD plugin. For information on how to use plugins, see NOMAD Plugins .","title":"Introduction"},{"location":"index.html#about-the-plugin","text":"The core of this plugin includes deposition techniques used in perovskite solar cells, characterization methods for these solar cells, and electrochemical techniques, such as those involving a potentiostat. The plugin offers a structured approach to managing and analyzing data related to these techniques, facilitating a deeper understanding and innovations in solar cell and electrocatalysis research.","title":"About the Plugin"},{"location":"index.html#baseclasses-folder","text":"The baseclasses folder is the heart of this plugin, containing several NOMAD schemas developed at Helmoltz-Zentrum Berlin (HZB). These schemas are critical for organizing and interpreting experimental data.","title":"Baseclasses Folder"},{"location":"index.html#application-plugins-and-parsers","text":"The schemas and techniques provided by this plugin can be used to derive application-specific plugins and parsers. Here are some examples of how our baseclasses have been utilized in different contexts: HZB Solar Cells HZB Electro Catalysis KIT Solar Cells","title":"Application Plugins and Parsers"},{"location":"explanation/measurements.html","text":"Measurements \u00b6 In contrast to synthesis, measurements come at least in a file. Depending on the measurement software more or less meta data is provided. Here we focus on two important steps. We need to make sure that individual measurements contain relevant metadata, usually this is a quite involved task, ideas are here to convert some measurments into NeXus or to develop new standards and then making sure that the measurement software complies to these standards. Once a data file exist, independent of the quality of the metadata, we provide parser in nomad, which read the files and create entries in nomad. Ideally at least the sample id of the measured samples is provided so that the relevant linking in nomad is established (see: upload_measurement.md for a possible solution). Then uploading and processing these files to nomad is straight forward and can be either done by drag and dropping multiple measurement files or upload them via the nomad API.","title":"Measurements"},{"location":"explanation/measurements.html#measurements","text":"In contrast to synthesis, measurements come at least in a file. Depending on the measurement software more or less meta data is provided. Here we focus on two important steps. We need to make sure that individual measurements contain relevant metadata, usually this is a quite involved task, ideas are here to convert some measurments into NeXus or to develop new standards and then making sure that the measurement software complies to these standards. Once a data file exist, independent of the quality of the metadata, we provide parser in nomad, which read the files and create entries in nomad. Ideally at least the sample id of the measured samples is provided so that the relevant linking in nomad is established (see: upload_measurement.md for a possible solution). Then uploading and processing these files to nomad is straight forward and can be either done by drag and dropping multiple measurement files or upload them via the nomad API.","title":"Measurements"},{"location":"explanation/synthesis.html","text":"Synthesis \u00b6 The challenging part in material science is to model the synthesis of devices, such as solar cells, properly. Especially if these steps include information which is not stored in files automatically. This includes information on the manufacturing of solutions, but also the deposition of layers with manual Spin Coating, Slot Die Coating, and of course cleaning and annealing and quenching. All of these steps have plenty of parameters which need to be documented properly and inpart have great influence on the functional quality of the resulting devices. On the other hand we need to make sure that the manual work to document these steps for lab scientists needs to be as minimized as possible. Perovskite solar cells \u00b6 For this task we developed the experimental planning tool for perovskite solarcell synthesis. It allows to create the required synthesis information from pre-created templates and links all of these steps together. It provides tools to efficiently manipulate the templates for parameter variation. Example 1 \u00b6 I want to produce a solar cell using: Standard cleaning A standard spin-coated SAM HTL Slot Die Coating CsMAFAPbI3 as a absorber layer, where I vary the anti-solvent chemicals, and the dropping time of the anti-solvent Standard evaporation of C60 and BCP as ETLs Standard evaporation of Cu as a back contact As variable parameters I want Ethanol and Anisole as anti-solvents and exploring 5, 10, 15, 20, 25 seconds as the dropping time in each of them. Example 2 \u00b6 I want to produce a solar cell using: Standard cleaning A standard spin-coated SAM HTL AlO3 as a Slot Die Coated buffer layer, which is present in one half and absent in the other half of my batch Standard spin-coating MAPbI3 as a absorber layer Standard evaporation of C60 and BCP as ETLs Standard evaporation of Cu as a back contact The experimental planning tool is designed to document these plans efficiently provided that the standard processes exist, see: create experimental plan , create standard sample and create wet chemical deposition for more how-tos. Alternative we developed even easier to use structured excel sheets which are more intutitve to be used, see excel parsing hysprint for the nomad parser.","title":"Synthesis"},{"location":"explanation/synthesis.html#synthesis","text":"The challenging part in material science is to model the synthesis of devices, such as solar cells, properly. Especially if these steps include information which is not stored in files automatically. This includes information on the manufacturing of solutions, but also the deposition of layers with manual Spin Coating, Slot Die Coating, and of course cleaning and annealing and quenching. All of these steps have plenty of parameters which need to be documented properly and inpart have great influence on the functional quality of the resulting devices. On the other hand we need to make sure that the manual work to document these steps for lab scientists needs to be as minimized as possible.","title":"Synthesis"},{"location":"explanation/synthesis.html#perovskite-solar-cells","text":"For this task we developed the experimental planning tool for perovskite solarcell synthesis. It allows to create the required synthesis information from pre-created templates and links all of these steps together. It provides tools to efficiently manipulate the templates for parameter variation.","title":"Perovskite solar cells"},{"location":"explanation/synthesis.html#example-1","text":"I want to produce a solar cell using: Standard cleaning A standard spin-coated SAM HTL Slot Die Coating CsMAFAPbI3 as a absorber layer, where I vary the anti-solvent chemicals, and the dropping time of the anti-solvent Standard evaporation of C60 and BCP as ETLs Standard evaporation of Cu as a back contact As variable parameters I want Ethanol and Anisole as anti-solvents and exploring 5, 10, 15, 20, 25 seconds as the dropping time in each of them.","title":"Example 1"},{"location":"explanation/synthesis.html#example-2","text":"I want to produce a solar cell using: Standard cleaning A standard spin-coated SAM HTL AlO3 as a Slot Die Coated buffer layer, which is present in one half and absent in the other half of my batch Standard spin-coating MAPbI3 as a absorber layer Standard evaporation of C60 and BCP as ETLs Standard evaporation of Cu as a back contact The experimental planning tool is designed to document these plans efficiently provided that the standard processes exist, see: create experimental plan , create standard sample and create wet chemical deposition for more how-tos. Alternative we developed even easier to use structured excel sheets which are more intutitve to be used, see excel parsing hysprint for the nomad parser.","title":"Example 2"},{"location":"how_to/browse_your_upload.html","text":"Browse your upload \u00b6 The easiest way to browse your upload is: Go to your upload. Click the magnifier symbol and select HZB ELN or something similar. This then jumps to the explore view with your upload fixed: You have 4 categories Author Name , Methods , Lab Ids , Sections . You can click the checkbox to filter. Eg. to filter by Batch click:","title":"Browse Your Upload"},{"location":"how_to/browse_your_upload.html#browse-your-upload","text":"The easiest way to browse your upload is: Go to your upload. Click the magnifier symbol and select HZB ELN or something similar. This then jumps to the explore view with your upload fixed: You have 4 categories Author Name , Methods , Lab Ids , Sections . You can click the checkbox to filter. Eg. to filter by Batch click:","title":"Browse your upload"},{"location":"how_to/create_entry.html","text":"Create an entry and upload \u00b6 Follow the following steps to create an entry.","title":"Create an Entry"},{"location":"how_to/create_entry.html#create-an-entry-and-upload","text":"Follow the following steps to create an entry.","title":"Create an entry and upload"},{"location":"how_to/create_experimental_plan.html","text":"list_of_ids_plan HZB_MiGo_20231109_BatchX.csv Create an experimental plan \u00b6 The experimental plan is the core tool to document synthesis. You should at least have created some processes, eg. wet chemical depositions as in create_wet_chemical_deposition.md , or cleaning or evaporation. Or you create a standard sample as in create_standard_sample.md Follow the first steps in create_entry.md . Select HySprint_ExperimentalPlan as a built-in schema . If you have select a standard sample by reference (click pen symbol) and click save . This loads the process and information from the standard sample in to the experimental plan. Enter the number of substrates and the substrates per subbatch . It is important that the number substrates per subbatch devides the number number of substrates . In a parameter variation there is room for number of substrates devided by substrates per subbatch different variations. So if you hae 8 substrates and 2 substrates per subbatch you have 8/2=4 different parameter variations. Each variation will be applied to the whole subbatch. You can now manual change or create the information in solar cell properties and plan . plan captures the steps planned for the synthesis by reference, if you added a standard sample you can change the references. Parameter variation: for each step you can add some parameter variation. Select a step and then add the subsection parameters or click the vary parameters checkbox. If you added a parameters subsection select a parameter from the drop down menue, eg, quenching/anti_solvent_dropping_time . The unit is filled automatically but can be changed. See also set_parameters_in_experimental_plan.md to see how to select the correct parameters. Once you entered all variations click the LOAD STANDARD PROCESSES button. This copies the information from the template from the reference (or from the standard sample ) and the parameters subsection into the step As you see, there are now 8/2=4 batch processes . Now you can manually change further the parameter by navigating into the batch process . The present checkbox allows you to skip a process for a specific subbatch, just uncheck it if you for example use a buffer layer. !ATTENTION:! all manually changed data will get lost when pressing the LOAD STANDARD PROCESSES button again, this will load the template and parameter variation again as specified before. If you are happy with the plan click the CREATE SAMPLES AND PROCESSES button. This creates all samples, batches, ids and processes. This also creates an html overview which you can find in batch_plan_pdf . You can download it and open and print it with your browser. This is a summary of all what nomad knows about your experimental plan as well as a reference to the main batch. Finally, either navigate to the explore view (see: browse_your_upload.md ) and select HySprint_Batch and select the one with the ID defined in the experimental plan or follow the reference in the experimental plan. Click the EXPORT BATCH IDS button and then download the csv_export_file . This looks like this: 0 1 2 3 4 5 0 HZB_MiGo_20231109_BatchX_0_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 1 Evaporation C60, BCP, Cu 1 HZB_MiGo_20231109_BatchX_0_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 1 Evaporation C60, BCP, Cu 2 HZB_MiGo_20231109_BatchX_1_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 2 Evaporation C60, BCP, Cu 3 HZB_MiGo_20231109_BatchX_1_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 2 Evaporation C60, BCP, Cu 4 HZB_MiGo_20231109_BatchX_2_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 3 Evaporation C60, BCP, Cu 5 HZB_MiGo_20231109_BatchX_2_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 3 Evaporation C60, BCP, Cu 6 HZB_MiGo_20231109_BatchX_3_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 4 Evaporation C60, BCP, Cu 7 HZB_MiGo_20231109_BatchX_3_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 4 Evaporation C60, BCP, Cu This gives you the ids for the respective parameter variation, which you can then copy into your measurement data (see: upload_measurement.md )","title":"Create an Experimental Plan"},{"location":"how_to/create_experimental_plan.html#create-an-experimental-plan","text":"The experimental plan is the core tool to document synthesis. You should at least have created some processes, eg. wet chemical depositions as in create_wet_chemical_deposition.md , or cleaning or evaporation. Or you create a standard sample as in create_standard_sample.md Follow the first steps in create_entry.md . Select HySprint_ExperimentalPlan as a built-in schema . If you have select a standard sample by reference (click pen symbol) and click save . This loads the process and information from the standard sample in to the experimental plan. Enter the number of substrates and the substrates per subbatch . It is important that the number substrates per subbatch devides the number number of substrates . In a parameter variation there is room for number of substrates devided by substrates per subbatch different variations. So if you hae 8 substrates and 2 substrates per subbatch you have 8/2=4 different parameter variations. Each variation will be applied to the whole subbatch. You can now manual change or create the information in solar cell properties and plan . plan captures the steps planned for the synthesis by reference, if you added a standard sample you can change the references. Parameter variation: for each step you can add some parameter variation. Select a step and then add the subsection parameters or click the vary parameters checkbox. If you added a parameters subsection select a parameter from the drop down menue, eg, quenching/anti_solvent_dropping_time . The unit is filled automatically but can be changed. See also set_parameters_in_experimental_plan.md to see how to select the correct parameters. Once you entered all variations click the LOAD STANDARD PROCESSES button. This copies the information from the template from the reference (or from the standard sample ) and the parameters subsection into the step As you see, there are now 8/2=4 batch processes . Now you can manually change further the parameter by navigating into the batch process . The present checkbox allows you to skip a process for a specific subbatch, just uncheck it if you for example use a buffer layer. !ATTENTION:! all manually changed data will get lost when pressing the LOAD STANDARD PROCESSES button again, this will load the template and parameter variation again as specified before. If you are happy with the plan click the CREATE SAMPLES AND PROCESSES button. This creates all samples, batches, ids and processes. This also creates an html overview which you can find in batch_plan_pdf . You can download it and open and print it with your browser. This is a summary of all what nomad knows about your experimental plan as well as a reference to the main batch. Finally, either navigate to the explore view (see: browse_your_upload.md ) and select HySprint_Batch and select the one with the ID defined in the experimental plan or follow the reference in the experimental plan. Click the EXPORT BATCH IDS button and then download the csv_export_file . This looks like this: 0 1 2 3 4 5 0 HZB_MiGo_20231109_BatchX_0_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 1 Evaporation C60, BCP, Cu 1 HZB_MiGo_20231109_BatchX_0_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 1 Evaporation C60, BCP, Cu 2 HZB_MiGo_20231109_BatchX_1_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 2 Evaporation C60, BCP, Cu 3 HZB_MiGo_20231109_BatchX_1_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 2 Evaporation C60, BCP, Cu 4 HZB_MiGo_20231109_BatchX_2_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 3 Evaporation C60, BCP, Cu 5 HZB_MiGo_20231109_BatchX_2_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 3 Evaporation C60, BCP, Cu 6 HZB_MiGo_20231109_BatchX_3_0 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 4 Evaporation C60, BCP, Cu 7 HZB_MiGo_20231109_BatchX_3_1 Solution and UV standard cleaning Sam 2PACz spincoating CsMAFA perovscite spincoating 4 Evaporation C60, BCP, Cu This gives you the ids for the respective parameter variation, which you can then copy into your measurement data (see: upload_measurement.md )","title":"Create an experimental plan"},{"location":"how_to/create_solution.html","text":"Create a solution \u00b6 Follow the first steps in create_entry.md . Select HySprint_Solution as a built-in schema Click create . Make changes, e.g. change the date, write down some notes ... , see solution.md for more details. see solution.md for more details.","title":"Create a Solution"},{"location":"how_to/create_solution.html#create-a-solution","text":"Follow the first steps in create_entry.md . Select HySprint_Solution as a built-in schema Click create . Make changes, e.g. change the date, write down some notes ... , see solution.md for more details. see solution.md for more details.","title":"Create a solution"},{"location":"how_to/create_standard_sample.html","text":"Create Standard Sample \u00b6 A standard sample is a collection of processes and information which can serve as a baseline in an experimental plan. First, create some template processes, eg: wet chemical depositions as in create_wet_chemical_deposition.md , or cleaning or evaporation Then follow the first steps in create_entry.md . 1. Select HySprint_StandardSample as a built-in schema 2. Select a substrate by reference (click pen symbol), (this needs to exist first, e.g. ITO on glass, 6 px). 3. Select a sample architecture 4. Select some template processes by reference (click pen symbol), which have to be created before. You can filter by a specific upload to find the correct entries","title":"Create a Standard Sample"},{"location":"how_to/create_standard_sample.html#create-standard-sample","text":"A standard sample is a collection of processes and information which can serve as a baseline in an experimental plan. First, create some template processes, eg: wet chemical depositions as in create_wet_chemical_deposition.md , or cleaning or evaporation Then follow the first steps in create_entry.md . 1. Select HySprint_StandardSample as a built-in schema 2. Select a substrate by reference (click pen symbol), (this needs to exist first, e.g. ITO on glass, 6 px). 3. Select a sample architecture 4. Select some template processes by reference (click pen symbol), which have to be created before. You can filter by a specific upload to find the correct entries","title":"Create Standard Sample"},{"location":"how_to/create_wet_chemical_deposition.html","text":"Create wet chemical deposition \u00b6 This covers the creation of Slot Die Coating , Spin Coating , Spray Pyrolysis , Drop Casting , Dip Coating , and Inkjet Printing . Follow the first steps in create_entry.md . Select HySprint_SpinCoating (or any other WCD technique) as a built-in schema Click create Make changes, e.g. change the date, write down some notes ..., see wet_chemical_deposition.md for more details.","title":"Create Wet Chemical Deposition"},{"location":"how_to/create_wet_chemical_deposition.html#create-wet-chemical-deposition","text":"This covers the creation of Slot Die Coating , Spin Coating , Spray Pyrolysis , Drop Casting , Dip Coating , and Inkjet Printing . Follow the first steps in create_entry.md . Select HySprint_SpinCoating (or any other WCD technique) as a built-in schema Click create Make changes, e.g. change the date, write down some notes ..., see wet_chemical_deposition.md for more details.","title":"Create wet chemical deposition"},{"location":"how_to/set_parameters_in_experimental_plan.html","text":"Setting Solution Parameter in experimental plan \u00b6 We will discuss the logic behind accessing the parameters of a solution in a wet chemical deposition in Nomad. The idea is that we create a path to uniquely identify a parameter based on the names in nomad. Every solution parameter will start with accessing the solution: solution/ which references the solution section. In theory there could be multiple solutions be used, to access the first we need to write /0/ . To access the second /1/ , and so on... The first parameter is the solution_volume: solution/0/solution_volume Keep in mind that the name of the parameter in nomad is usually the name in lower cases with spaces substituted with and underscore _ The next level is the solution itself: solution/0/solution_details Here it is important to use solution_details, this refers to the details of the specific solution. We can the choose between additive , solvent , solute to select the next level, there we then can select the parameters like this: Keep in mind that we again can have multiple solutes and solvents. solution/0/solution_details/solute/0/concentration_mol solution/0/solution_details/solute/0/chemical_volume solution/0/solution_details/solute/0/chemical_mass solution/0/solution_details/solute/0/concentration_mass replacing solute with additive or solvent gives the respective other sections. Now the whole procedure is recursive for other_solution . E.g. accessing the concentration of an solute of another solution would be: solution/0/solution_details/other_solution/0/solution_details/solute/0/concentration_mol If the path is correct and the unit field is empty it should be filled with a default unit. E.g. mole / milliliter If you want to change the chemical the name is actual chemical_2 , so to change the chemical of the first solute in the first solution of a deposition would be: solution/0/solution_details/solute/0/chemical_2/name","title":"Setting Solution Parameter in experimental plan"},{"location":"how_to/set_parameters_in_experimental_plan.html#setting-solution-parameter-in-experimental-plan","text":"We will discuss the logic behind accessing the parameters of a solution in a wet chemical deposition in Nomad. The idea is that we create a path to uniquely identify a parameter based on the names in nomad. Every solution parameter will start with accessing the solution: solution/ which references the solution section. In theory there could be multiple solutions be used, to access the first we need to write /0/ . To access the second /1/ , and so on... The first parameter is the solution_volume: solution/0/solution_volume Keep in mind that the name of the parameter in nomad is usually the name in lower cases with spaces substituted with and underscore _ The next level is the solution itself: solution/0/solution_details Here it is important to use solution_details, this refers to the details of the specific solution. We can the choose between additive , solvent , solute to select the next level, there we then can select the parameters like this: Keep in mind that we again can have multiple solutes and solvents. solution/0/solution_details/solute/0/concentration_mol solution/0/solution_details/solute/0/chemical_volume solution/0/solution_details/solute/0/chemical_mass solution/0/solution_details/solute/0/concentration_mass replacing solute with additive or solvent gives the respective other sections. Now the whole procedure is recursive for other_solution . E.g. accessing the concentration of an solute of another solution would be: solution/0/solution_details/other_solution/0/solution_details/solute/0/concentration_mol If the path is correct and the unit field is empty it should be filled with a default unit. E.g. mole / milliliter If you want to change the chemical the name is actual chemical_2 , so to change the chemical of the first solute in the first solution of a deposition would be: solution/0/solution_details/solute/0/chemical_2/name","title":"Setting Solution Parameter in experimental plan"},{"location":"how_to/upload_measurement.html","text":"Upload measurement \u00b6 If you created an experimental plan and samples with ids (see: create_experimental_plan.md ) you can then take these ids to annotate your measurements. Currently we have classes for JV , EQE , PL , UVvis , Aging tests , trSPV , simple XRD , some Potentiostat techniques. For JV , EQE , PL , UVvis , trSPV at HySprint at HZB we have the following logic: Name your file: <id>.<notes>.<technique>.<file_type> please note the periods in the name! eg: HZB_MiGo_20231109_BatchX_3_0.after_3_days.jv.txt The first part is the id, then you can put some individual note, then there is the type currently at HySprint we have eqe , jv , pl , hy , spv , uvvis , sem , xrd , pli as possible techniques. If you drag and drop these files (multiple at once possible) in your upload: It automatically creates the respective nomad entry (eg. HySprint_JVmeasurement ), links it to the corresponding sample and puts the note in the comment.","title":"Upload Measurement"},{"location":"how_to/upload_measurement.html#upload-measurement","text":"If you created an experimental plan and samples with ids (see: create_experimental_plan.md ) you can then take these ids to annotate your measurements. Currently we have classes for JV , EQE , PL , UVvis , Aging tests , trSPV , simple XRD , some Potentiostat techniques. For JV , EQE , PL , UVvis , trSPV at HySprint at HZB we have the following logic: Name your file: <id>.<notes>.<technique>.<file_type> please note the periods in the name! eg: HZB_MiGo_20231109_BatchX_3_0.after_3_days.jv.txt The first part is the id, then you can put some individual note, then there is the type currently at HySprint we have eqe , jv , pl , hy , spv , uvvis , sem , xrd , pli as possible techniques. If you drag and drop these files (multiple at once possible) in your upload: It automatically creates the respective nomad entry (eg. HySprint_JVmeasurement ), links it to the corresponding sample and puts the note in the comment.","title":"Upload measurement"},{"location":"references/solution.html","text":"Solution CHEBI_75958 \u00b6 The plane solution lane looks like this: You can select: - preparation , information on the preparation information needed - solutes , eg. PbI2 - solvents , eg. Isoprpanol - other solution , eg. a similar entry to what you are doing right now - additives , similar to solutes, but with a special purpose - storage , information on where and for how long the solution was stored - properties , some properties, like ph value - solution_id , sometimes a solution is a sample of itself and is characterized in this case Preparation \u00b6 You can set: - Atmosphere , eg. N2, there are some suggestion but you can type what you want - Method , eg. stirring - Temperature , - Time - Speed , for some methods the speed is relevant, if not leave it blank - Solven ratio , this is a free text field, you can fill it as you wish, e.g. 1:3:5 Anisole,Ethanol,IPA Solutes, solvents, additives \u00b6 They all share the same properties. You can set: - Chemical , Chemical_2 , you should use Chemical_2 , since there you directly can set a chemical by name. This will trigger a call to PubChem to fill out the missing information. Chemical is used if you would like to reference a specific chemical, which exists somewhere else. - Chemical volume and Chemical mass specifiy the amount of the substance in absolute values - Concentration mol and Concentration mass specifiy the amount of the substance in relative values - Amount relative , eg. if one has 3 solvents in ration 1:3:5, you could write 1, 3 and 5 for the respective substances Storage \u00b6 You can select: - Start date , End date - Storage conditions , eg. Fridge - Temperature - Atmosphere , eg. N2, Ar Properties \u00b6 This includes: - ph Value , final volume and final concentration","title":"Solution"},{"location":"references/solution.html#solution-chebi_75958","text":"The plane solution lane looks like this: You can select: - preparation , information on the preparation information needed - solutes , eg. PbI2 - solvents , eg. Isoprpanol - other solution , eg. a similar entry to what you are doing right now - additives , similar to solutes, but with a special purpose - storage , information on where and for how long the solution was stored - properties , some properties, like ph value - solution_id , sometimes a solution is a sample of itself and is characterized in this case","title":"Solution CHEBI_75958"},{"location":"references/solution.html#preparation","text":"You can set: - Atmosphere , eg. N2, there are some suggestion but you can type what you want - Method , eg. stirring - Temperature , - Time - Speed , for some methods the speed is relevant, if not leave it blank - Solven ratio , this is a free text field, you can fill it as you wish, e.g. 1:3:5 Anisole,Ethanol,IPA","title":"Preparation"},{"location":"references/solution.html#solutes-solvents-additives","text":"They all share the same properties. You can set: - Chemical , Chemical_2 , you should use Chemical_2 , since there you directly can set a chemical by name. This will trigger a call to PubChem to fill out the missing information. Chemical is used if you would like to reference a specific chemical, which exists somewhere else. - Chemical volume and Chemical mass specifiy the amount of the substance in absolute values - Concentration mol and Concentration mass specifiy the amount of the substance in relative values - Amount relative , eg. if one has 3 solvents in ration 1:3:5, you could write 1, 3 and 5 for the respective substances","title":"Solutes, solvents, additives"},{"location":"references/solution.html#storage","text":"You can select: - Start date , End date - Storage conditions , eg. Fridge - Temperature - Atmosphere , eg. N2, Ar","title":"Storage"},{"location":"references/solution.html#properties","text":"This includes: - ph Value , final volume and final concentration","title":"Properties"},{"location":"references/wet_chemical_deposition.html","text":"Wet chemical deposition \u00b6 This covers Slot Die Coating , Spin Coating , Spray Pyrolysis , Drop Casting , Dip Coating , and Inkjet Printing . They all share this view: samples refers to the sample or substrate the deposition was performed on solution refers to the solution/ink used in the deposition layer referes to the layer type, such as HTL, ETL... and the layer material name , which is meant to be the common abbreviation such as MAPbI3, 2PACz. From this we try to convert it in the correct molecular formula. You can also write the molecular formula yourself. quenching relates to different types of quenching, e.g. anti solvent quenching after some spin coating or Air knife quenching after some slot die coating , the specific quenching can be selected from a drop-down menu annealing , information of annealing afterwards sintering , information of sintering afterwards","title":"Wet Chemical Deposition"},{"location":"references/wet_chemical_deposition.html#wet-chemical-deposition","text":"This covers Slot Die Coating , Spin Coating , Spray Pyrolysis , Drop Casting , Dip Coating , and Inkjet Printing . They all share this view: samples refers to the sample or substrate the deposition was performed on solution refers to the solution/ink used in the deposition layer referes to the layer type, such as HTL, ETL... and the layer material name , which is meant to be the common abbreviation such as MAPbI3, 2PACz. From this we try to convert it in the correct molecular formula. You can also write the molecular formula yourself. quenching relates to different types of quenching, e.g. anti solvent quenching after some spin coating or Air knife quenching after some slot die coating , the specific quenching can be selected from a drop-down menu annealing , information of annealing afterwards sintering , information of sintering afterwards","title":"Wet chemical deposition"},{"location":"tutorial/oasis_deployment.html","text":"Configuring and deploying NOMAD OASIS \u00b6 The nomad-baseclasses package is intended to be used within NOMAD OASIS - any service that uses NOMAD software independently from the central NOMAD . Below are basic instructions for customizing and deploying your own NOMAD OASIS. For deployment, a system with at least 4 CPU cores, 16 GB RAM and 30 GB disk space is recommended. For more details, see NOMAD documentation . NOMAD OASIS distribution template \u00b6 A simple single-machine setup with docker-compose is sufficient in many cases. nomad-distro-template GitHub repository provides a template for the creation of NOMAD OASIS distribution image. The README.md file of this repository describes the process in detail; here we provide a short version. Begin with Use this template in the upper right corner, which would create a new GitHub repository using the template. You will need to fill in the information for the repository, as well as choose between either private or public type (the public is recommended). An automated GitHub Actions workflow will run upon creation; wait until all workflows finish (this may take tens of minutes). You can see the status of the workflows under Actions tab. After this, return to the main page of the repository and refresh the tab. The top-most part of the README message should disappear (so you should see <github username>'s NOMAD Oasis Distribution instead of NOMAD Oasis Distribution Template at the top of README.md ). If this did not happen, navigate to Actions tab, choose Template Repository Initialisation workflow and trigger it manually by clicking Run workflow . Plugins and NOMAD OASIS customization \u00b6 NOMAD OASIS can be customized for specific application by various plugins. For detailed explanation of the NOMAD plugin system, see the official documentation . If you would like to test the OASIS with the default set of plugins, you can skip this section and continue directly with deployment. Otherwise, the list of plugins can be modified in pyproject.toml by adding or removing lines in the plugin table: [project.optional-dependencies] plugins = [ ... ] Plugins can be specified in several ways. If it is distributed via PyPI, you can choose a version or a range of versions, for example: \"nomad-measurements>=1.2.0\" , If it is available from GitHub repository, you can choose a tag: \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@v0.0.4\" , or a specific commit hash: \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@71b7e8c9bb376ce9e8610aba9a20be0b5bce6775\" , Note that nomad-baseclasses does not have to be included directly in the plugin list for your OASIS. Instead, it can be imported as a python dependency for plugins utilizing the base classes (for example, nomad-hysprint ). Every time changes are commited to the main branch of the repository, the action generating docker image will be run automatically. When these workflows are finished, the OASIS can be deployed. Example plugin lists \u00b6 List of plugins installed in a given NOMAD OASIS can be found under the About -> Information page of this OASIS (scroll to the bottom of the page). The plugin packages gives the general list of plugins, and specific entry points for apps, parsers, schemas etc are given below. Click on any item in these lists to view more detailed information, such as a short description and specific plugin version. Examples: NOMAD OASIS at Helmholtz-Zentrum Berlin: SE HZB OASIS Central NOMAD deployment: NOMAD Central example OASIS: Example OASIS Deploying NOMAD OASIS \u00b6 Make sure you have docker installed. Then clone the repository created from the template: git clone https://github.com/<github username>/test-oasis-for-workshop.git cd test-oasis-for-workshop On Linux systems only, recursively change the owner of the .volumes directory to the nomad user (1000): sudo chown -R 1000 .volumes Pull the images specified in the docker-compose.yaml file: docker compose pull Next choose if you will use HTTP or HTTPS protocols for communication. HTTP is set up by default and is suitable for testing. HTTPS is more secure, but requires a TLS certificate, which must be renewed periodically. If you have a domain name, you can acquire a free certificate from Let's Encrypt . Follow their tutorials to generate a certificate, then update configuration in docker-compose.yaml by replacing # HTTP - ./configs/nginx_http.conf:/etc/nginx/conf.d/default.conf:ro with # HTTPS - ./configs/nginx_https.conf:/etc/nginx/conf.d/default.conf:ro - ./ssl:/etc/nginx/ssl:ro # Your certificate files Finally, run docker-compose in detached mode (this may take a few minutes): docker compose up -d NOMAD OASIS graphic interface should now be accessible via browser at http://localhost/nomad-oasis . The OASIS can be stopped by using docker compose down and updated by repeating docker compose pull docker compose up -d Test deployment using GitHub Codespaces \u00b6 For simple tests, NOMAD OASIS can be deployed in GitHub Codespaces; this will use resources from GitHub and therefore will work even if your local computer lacks sufficient RAM. Most of the instructions above remain applicable, with the necessary changes described below: Instead of cloning the repository created from the template locally, create Codespaces on main branch of the repository by selecting Code -> Codespaces -> ... -> new with options , then choose an option with 16 GB RAM. Use the HTTP protocol for communication To open GUI, instead of using http://localhost/nomad-oasis go to https://<...>-80.app.github.dev/nomad-oasis/gui/about/information in a new browser tab; here https://<...>.github.dev/ is the address of the Codespaces.","title":"Configuring and deploying NOMAD OASIS"},{"location":"tutorial/oasis_deployment.html#configuring-and-deploying-nomad-oasis","text":"The nomad-baseclasses package is intended to be used within NOMAD OASIS - any service that uses NOMAD software independently from the central NOMAD . Below are basic instructions for customizing and deploying your own NOMAD OASIS. For deployment, a system with at least 4 CPU cores, 16 GB RAM and 30 GB disk space is recommended. For more details, see NOMAD documentation .","title":"Configuring and deploying NOMAD OASIS"},{"location":"tutorial/oasis_deployment.html#nomad-oasis-distribution-template","text":"A simple single-machine setup with docker-compose is sufficient in many cases. nomad-distro-template GitHub repository provides a template for the creation of NOMAD OASIS distribution image. The README.md file of this repository describes the process in detail; here we provide a short version. Begin with Use this template in the upper right corner, which would create a new GitHub repository using the template. You will need to fill in the information for the repository, as well as choose between either private or public type (the public is recommended). An automated GitHub Actions workflow will run upon creation; wait until all workflows finish (this may take tens of minutes). You can see the status of the workflows under Actions tab. After this, return to the main page of the repository and refresh the tab. The top-most part of the README message should disappear (so you should see <github username>'s NOMAD Oasis Distribution instead of NOMAD Oasis Distribution Template at the top of README.md ). If this did not happen, navigate to Actions tab, choose Template Repository Initialisation workflow and trigger it manually by clicking Run workflow .","title":"NOMAD OASIS distribution template"},{"location":"tutorial/oasis_deployment.html#plugins-and-nomad-oasis-customization","text":"NOMAD OASIS can be customized for specific application by various plugins. For detailed explanation of the NOMAD plugin system, see the official documentation . If you would like to test the OASIS with the default set of plugins, you can skip this section and continue directly with deployment. Otherwise, the list of plugins can be modified in pyproject.toml by adding or removing lines in the plugin table: [project.optional-dependencies] plugins = [ ... ] Plugins can be specified in several ways. If it is distributed via PyPI, you can choose a version or a range of versions, for example: \"nomad-measurements>=1.2.0\" , If it is available from GitHub repository, you can choose a tag: \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@v0.0.4\" , or a specific commit hash: \"nomad-measurements @ git+https://github.com/FAIRmat-NFDI/nomad-measurements.git@71b7e8c9bb376ce9e8610aba9a20be0b5bce6775\" , Note that nomad-baseclasses does not have to be included directly in the plugin list for your OASIS. Instead, it can be imported as a python dependency for plugins utilizing the base classes (for example, nomad-hysprint ). Every time changes are commited to the main branch of the repository, the action generating docker image will be run automatically. When these workflows are finished, the OASIS can be deployed.","title":"Plugins and NOMAD OASIS customization"},{"location":"tutorial/oasis_deployment.html#example-plugin-lists","text":"List of plugins installed in a given NOMAD OASIS can be found under the About -> Information page of this OASIS (scroll to the bottom of the page). The plugin packages gives the general list of plugins, and specific entry points for apps, parsers, schemas etc are given below. Click on any item in these lists to view more detailed information, such as a short description and specific plugin version. Examples: NOMAD OASIS at Helmholtz-Zentrum Berlin: SE HZB OASIS Central NOMAD deployment: NOMAD Central example OASIS: Example OASIS","title":"Example plugin lists"},{"location":"tutorial/oasis_deployment.html#deploying-nomad-oasis","text":"Make sure you have docker installed. Then clone the repository created from the template: git clone https://github.com/<github username>/test-oasis-for-workshop.git cd test-oasis-for-workshop On Linux systems only, recursively change the owner of the .volumes directory to the nomad user (1000): sudo chown -R 1000 .volumes Pull the images specified in the docker-compose.yaml file: docker compose pull Next choose if you will use HTTP or HTTPS protocols for communication. HTTP is set up by default and is suitable for testing. HTTPS is more secure, but requires a TLS certificate, which must be renewed periodically. If you have a domain name, you can acquire a free certificate from Let's Encrypt . Follow their tutorials to generate a certificate, then update configuration in docker-compose.yaml by replacing # HTTP - ./configs/nginx_http.conf:/etc/nginx/conf.d/default.conf:ro with # HTTPS - ./configs/nginx_https.conf:/etc/nginx/conf.d/default.conf:ro - ./ssl:/etc/nginx/ssl:ro # Your certificate files Finally, run docker-compose in detached mode (this may take a few minutes): docker compose up -d NOMAD OASIS graphic interface should now be accessible via browser at http://localhost/nomad-oasis . The OASIS can be stopped by using docker compose down and updated by repeating docker compose pull docker compose up -d","title":"Deploying NOMAD OASIS"},{"location":"tutorial/oasis_deployment.html#test-deployment-using-github-codespaces","text":"For simple tests, NOMAD OASIS can be deployed in GitHub Codespaces; this will use resources from GitHub and therefore will work even if your local computer lacks sufficient RAM. Most of the instructions above remain applicable, with the necessary changes described below: Instead of cloning the repository created from the template locally, create Codespaces on main branch of the repository by selecting Code -> Codespaces -> ... -> new with options , then choose an option with 16 GB RAM. Use the HTTP protocol for communication To open GUI, instead of using http://localhost/nomad-oasis go to https://<...>-80.app.github.dev/nomad-oasis/gui/about/information in a new browser tab; here https://<...>.github.dev/ is the address of the Codespaces.","title":"Test deployment using GitHub Codespaces"},{"location":"tutorial/oasis_distro_dev.html","text":"Development environment for the NOMAD plugins \u00b6 NOMAD OASIS can be customized using NOMAD plugins - either existing ones or newly created or modified for a specific purpose. However, developing plugins within a standard OASIS deployment is inconvenient and unnecessarily time-consuming: the Docker images will have to be generated and deployed anew after each correction to the plugin code. Instead, a local development environment can be utilized to develop multiple plugins (as well as the central NOMAD package) in a consistent, centralized and much easier way. This can be done using nomad-distro-dev repository on GitHub. The development environment is designed to natively work with Linux and macOS; it is still possible to run it on Windows systems; however, the environment may run slower or require more resources. Below we describe these two cases separately. Setting up nomad-distro-dev on Linux or macOS \u00b6 Start with forking nomad-distro-dev repository ( Fork -> Create a new fork in the upper right part of the page). You will also need the following software installed on your system: Docker - generally, only docker-compose functionality will be needed uv python package manager, version 0.5.14 or above node.js version 20 or above and yarn version 1.22 or above are necessary to run the GUI git for version control and interaction with GitHub Some IDE for plugin development, such as VS Code Clone the forked repository from GitHub: git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev And run Docker containers in detached mode: docker compose up -d To stop the containers, run the following command from the same folder: docker compose down Then, follow the Step-by-Step Setup instructions in the nomad-distro-dev readme file. If the plugin you are developing has its own sub-plugins (or any other submodules), such as pynxtools , you will need to reinitialize submodules after adding the plugin by running again: git submodule update --init --recursive Note that the plugins added to the repository are each also git repositories, so you can choose to work on a specific branch and push or pull changes as usual by using git commands from the corresponding folder, for example: cd packages/<plugin-name> git checkout -b New-feature-branch Setting up nomad-distro-dev on Windows \u00b6 Start with forking nomad-distro-dev repository ( Fork -> Create a new fork in the upper right part of the page). You will also need the following software installed on your system: Docker Desktop - choose the default option with WSL. On first launch, Docker will prompt you to create an account and update the installed version of WSL; proceed according to the instructions provided by Docker. VS Code for plugin development Dev Containers extension for VS Code. In order to install it, start VS Code, go to the Extensions tab on the left side (also Ctrl + Shift + X by default) and type Dev Containers into the search. Install the official extension from Microsoft with this name. git for version control and interaction with GitHub Clone the forked repository from GitHub: git clone https://github.com/<your-username>/nomad-distro-dev.git Make sure Docker Desktop is running, then open the folder containing the cloned repository in VS Code. A notification that the folder contains a Dev Container configuration file should appear; click Reopen in Container . This step may take a few minutes, depending on the system; you can see the log while waiting. uv will be automatically installed during this step. Next, open a new terminal within VS Code ( + on the upper right of the existing terminal, or via drop-down menu Terminal on the top of the main window) and continue with the setup: docker compose up -d git submodule update --init --recursive Add the desired plugins as described in the readme file of nomad-distro-dev (this step is the same for all OS): git submodule add https://github.com/<user_name>/<package_name>.git packages/<package_name> uv add packages/<package_name> For example, in order to add nomad-perovskite-solar-cells-database plugin, run: git submodule add https://github.com/FAIRmat-NFDI/nomad-perovskite-solar-cells-database.git packages/nomad-perovskite-solar-cells-database uv add packages/nomad-perovskite-solar-cells-database/ If the plugin you are developing has its own sub-plugins (or any other submodules), such as pynxtools , you will need to repeat submodules initialization after adding the plugin by running again: git submodule update --init --recursive Note that the plugins added to the repository are each also git repositories, so you can choose to work on a specific branch and push or pull changes as usual by using git commands from the corresponding folder, for example: cd packages/<plugin-name> git checkout -b New-feature-branch Next, update the environment and install all the necessary dependencies: uv run poe setup This step may take a significant amount of time on the first run - 30 minutes is not unusual. Finally, start the NOMAD API app and NOMAD GUI: uv run poe start uv run poe gui start Either command will occupy the terminal, so run these two in separate terminals. Additional information \u00b6 If you modify the plugin code and need to restart NOMAD, in most cases stopping and restarting NOMAD API app is sufficient ( Ctrl + C in the corresponding terminal, then uv run poe start ). In some cases, GUI also has to be restarted. In order to stop the local NOMAD instance, interrupt both the API app and the GUI using Ctrl + C , then stop Docker images: docker compose down","title":"Development environment for the NOMAD plugins"},{"location":"tutorial/oasis_distro_dev.html#development-environment-for-the-nomad-plugins","text":"NOMAD OASIS can be customized using NOMAD plugins - either existing ones or newly created or modified for a specific purpose. However, developing plugins within a standard OASIS deployment is inconvenient and unnecessarily time-consuming: the Docker images will have to be generated and deployed anew after each correction to the plugin code. Instead, a local development environment can be utilized to develop multiple plugins (as well as the central NOMAD package) in a consistent, centralized and much easier way. This can be done using nomad-distro-dev repository on GitHub. The development environment is designed to natively work with Linux and macOS; it is still possible to run it on Windows systems; however, the environment may run slower or require more resources. Below we describe these two cases separately.","title":"Development environment for the NOMAD plugins"},{"location":"tutorial/oasis_distro_dev.html#setting-up-nomad-distro-dev-on-linux-or-macos","text":"Start with forking nomad-distro-dev repository ( Fork -> Create a new fork in the upper right part of the page). You will also need the following software installed on your system: Docker - generally, only docker-compose functionality will be needed uv python package manager, version 0.5.14 or above node.js version 20 or above and yarn version 1.22 or above are necessary to run the GUI git for version control and interaction with GitHub Some IDE for plugin development, such as VS Code Clone the forked repository from GitHub: git clone https://github.com/<your-username>/nomad-distro-dev.git cd nomad-distro-dev And run Docker containers in detached mode: docker compose up -d To stop the containers, run the following command from the same folder: docker compose down Then, follow the Step-by-Step Setup instructions in the nomad-distro-dev readme file. If the plugin you are developing has its own sub-plugins (or any other submodules), such as pynxtools , you will need to reinitialize submodules after adding the plugin by running again: git submodule update --init --recursive Note that the plugins added to the repository are each also git repositories, so you can choose to work on a specific branch and push or pull changes as usual by using git commands from the corresponding folder, for example: cd packages/<plugin-name> git checkout -b New-feature-branch","title":"Setting up nomad-distro-dev on Linux or macOS"},{"location":"tutorial/oasis_distro_dev.html#setting-up-nomad-distro-dev-on-windows","text":"Start with forking nomad-distro-dev repository ( Fork -> Create a new fork in the upper right part of the page). You will also need the following software installed on your system: Docker Desktop - choose the default option with WSL. On first launch, Docker will prompt you to create an account and update the installed version of WSL; proceed according to the instructions provided by Docker. VS Code for plugin development Dev Containers extension for VS Code. In order to install it, start VS Code, go to the Extensions tab on the left side (also Ctrl + Shift + X by default) and type Dev Containers into the search. Install the official extension from Microsoft with this name. git for version control and interaction with GitHub Clone the forked repository from GitHub: git clone https://github.com/<your-username>/nomad-distro-dev.git Make sure Docker Desktop is running, then open the folder containing the cloned repository in VS Code. A notification that the folder contains a Dev Container configuration file should appear; click Reopen in Container . This step may take a few minutes, depending on the system; you can see the log while waiting. uv will be automatically installed during this step. Next, open a new terminal within VS Code ( + on the upper right of the existing terminal, or via drop-down menu Terminal on the top of the main window) and continue with the setup: docker compose up -d git submodule update --init --recursive Add the desired plugins as described in the readme file of nomad-distro-dev (this step is the same for all OS): git submodule add https://github.com/<user_name>/<package_name>.git packages/<package_name> uv add packages/<package_name> For example, in order to add nomad-perovskite-solar-cells-database plugin, run: git submodule add https://github.com/FAIRmat-NFDI/nomad-perovskite-solar-cells-database.git packages/nomad-perovskite-solar-cells-database uv add packages/nomad-perovskite-solar-cells-database/ If the plugin you are developing has its own sub-plugins (or any other submodules), such as pynxtools , you will need to repeat submodules initialization after adding the plugin by running again: git submodule update --init --recursive Note that the plugins added to the repository are each also git repositories, so you can choose to work on a specific branch and push or pull changes as usual by using git commands from the corresponding folder, for example: cd packages/<plugin-name> git checkout -b New-feature-branch Next, update the environment and install all the necessary dependencies: uv run poe setup This step may take a significant amount of time on the first run - 30 minutes is not unusual. Finally, start the NOMAD API app and NOMAD GUI: uv run poe start uv run poe gui start Either command will occupy the terminal, so run these two in separate terminals.","title":"Setting up nomad-distro-dev on Windows"},{"location":"tutorial/oasis_distro_dev.html#additional-information","text":"If you modify the plugin code and need to restart NOMAD, in most cases stopping and restarting NOMAD API app is sufficient ( Ctrl + C in the corresponding terminal, then uv run poe start ). In some cases, GUI also has to be restarted. In order to stop the local NOMAD instance, interrupt both the API app and the GUI using Ctrl + C , then stop Docker images: docker compose down","title":"Additional information"},{"location":"tutorial/solar_cells.html","text":"Tutorial on solar cells \u00b6 This tutorial covers the efficient documentation of the synthesis of a batch of solarcells following a standard protocol with some parameter variation, linking characterizations to the finished devices (here JV data) and accessing this data through python using jupyter and nomads API. Synthesis \u00b6 Create an experimental plan (see: create_experimental_plan.md for a how to guide). This could then look like this: In this case we used standard cleaning, and some variations in the deposition techniques, in this case the anti-solvent dropping time. Measurement \u00b6 Then after measuring the devices you can name the files based on the ids given from your synthesis, eg. HZB_MiGo_20231005_Batch1_0_0.1.1.jv.txt (see: upload_measurement.md . Note that the id is build from the id from the experimental plan in the synthesis, this sample is the first sample in the first subbatch. When you drag and drop your measurement file, nomad processes the file and creates a nomad JV entry: After that you can browse your upload browse_your_upload.md . You can select the Solar cell view/app, which could look like this: Analysis in jupyter \u00b6 Open the jupyter hub from nomad, see: North Tools Nomad . This could look like this: Here we provide custom functions to join the data in nomad together to plot data from synthesis and measurements together. In this way we can group the anti-solvent dropping time from before together and create box plots over the respective JV data which was measured.","title":"Solar Cells"},{"location":"tutorial/solar_cells.html#tutorial-on-solar-cells","text":"This tutorial covers the efficient documentation of the synthesis of a batch of solarcells following a standard protocol with some parameter variation, linking characterizations to the finished devices (here JV data) and accessing this data through python using jupyter and nomads API.","title":"Tutorial on solar cells"},{"location":"tutorial/solar_cells.html#synthesis","text":"Create an experimental plan (see: create_experimental_plan.md for a how to guide). This could then look like this: In this case we used standard cleaning, and some variations in the deposition techniques, in this case the anti-solvent dropping time.","title":"Synthesis"},{"location":"tutorial/solar_cells.html#measurement","text":"Then after measuring the devices you can name the files based on the ids given from your synthesis, eg. HZB_MiGo_20231005_Batch1_0_0.1.1.jv.txt (see: upload_measurement.md . Note that the id is build from the id from the experimental plan in the synthesis, this sample is the first sample in the first subbatch. When you drag and drop your measurement file, nomad processes the file and creates a nomad JV entry: After that you can browse your upload browse_your_upload.md . You can select the Solar cell view/app, which could look like this:","title":"Measurement"},{"location":"tutorial/solar_cells.html#analysis-in-jupyter","text":"Open the jupyter hub from nomad, see: North Tools Nomad . This could look like this: Here we provide custom functions to join the data in nomad together to plot data from synthesis and measurements together. In this way we can group the anti-solvent dropping time from before together and create box plots over the respective JV data which was measured.","title":"Analysis in jupyter"}]}